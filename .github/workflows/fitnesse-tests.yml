name: FitNesse Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Make Maven wrapper executable
      if: runner.os != 'Windows'
      run: chmod +x mvnw

    - name: Build project and compile tests
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          ./mvnw.cmd clean test-compile
        else
          ./mvnw clean test-compile
        fi

    - name: Prepare FitNesse directories
      shell: bash
      run: |
        mkdir -p FitNesseRoot/files
        mkdir -p FitNesseRoot/RecentChanges
        mkdir -p FitNesseRoot/ErrorLogs

    - name: Download FitNesse dependencies
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          ./mvnw.cmd dependency:copy-dependencies -DincludeScope=test -DoutputDirectory=libs
        else
          ./mvnw dependency:copy-dependencies -DincludeScope=test -DoutputDirectory=libs
        fi

    - name: Start FitNesse server in background
      shell: bash
      run: |
        # Set classpath separator based on OS (Windows uses semicolon, Unix uses colon)
        if [ "$RUNNER_OS" == "Windows" ]; then
          CLASSPATH="libs/*;target/classes;target/test-classes"
          SLEEP_TIME=10
        else
          CLASSPATH="libs/*:target/classes:target/test-classes"
          SLEEP_TIME=5
        fi

        nohup java -cp "$CLASSPATH" fitnesseMain.FitNesseMain -p 8080 -e 0 -o > fitnesse.log 2>&1 &
        echo $! > fitnesse.pid
        echo "FitNesse server started with PID $(cat fitnesse.pid)"
        sleep $SLEEP_TIME
        echo "=== Initial FitNesse Log (first 30 lines) ==="
        head -30 fitnesse.log || echo "Log file not created yet"

    - name: Wait for FitNesse to be ready
      shell: bash
      run: |
        echo "Waiting for FitNesse to start..."
        for i in {1..60}; do
          if curl -f -s http://localhost:8080/ > /dev/null 2>&1; then
            echo "FitNesse is up and running!"
            exit 0
          fi
          if [ $((i % 10)) -eq 0 ]; then
            echo "=== FitNesse Log (last 10 lines) at attempt $i ==="
            tail -10 fitnesse.log 2>/dev/null || echo "Log not available"
          fi
          echo "Attempt $i/60: FitNesse not ready yet..."
          sleep 2
        done
        echo "FitNesse failed to start within 120 seconds"
        echo "=== Full FitNesse Log ==="
        cat fitnesse.log
        exit 1

    - name: Run FitNesse test suite
      shell: bash
      run: |
        # Run the test suite and capture the results
        curl -f --http0.9 "http://localhost:8080/CalculatorTests?suite&format=text" > test-results.txt
        cat test-results.txt

    - name: Check test results
      shell: bash
      run: |
        # Check if tests passed by looking for failure indicators
        if grep -q "0 Failures" test-results.txt; then
          echo "All tests passed!"
          echo "Test summary:"
          grep "Tests," test-results.txt
          exit 0
        else
          echo "Tests failed!"
          cat test-results.txt
          exit 1
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: fitnesse-test-results-${{ matrix.os }}
        path: |
          test-results.txt
          fitnesse.log
          fitnesse-error.log

    - name: Generate test summary
      if: always()
      shell: bash
      run: |
        echo "## FitNesse Test Results (${{ matrix.os }})" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        if [ -f test-results.txt ]; then
          tail -20 test-results.txt >> $GITHUB_STEP_SUMMARY
        else
          echo "Test results file not found - tests may not have run" >> $GITHUB_STEP_SUMMARY
        fi
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Stop FitNesse server
      if: always()
      shell: bash
      run: |
        if [ -f fitnesse.pid ]; then
          kill $(cat fitnesse.pid) || true
        fi
